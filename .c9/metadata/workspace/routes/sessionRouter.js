{"changed":true,"filter":false,"title":"sessionRouter.js","tooltip":"/routes/sessionRouter.js","value":"var express = require('express');\nvar _ = require(\"underscore\"); \nvar fs = require('fs');\nvar path = require(\"path\");\n\nvar sessionManager = require('../lib/sessionManager');\nvar apiManager = require('../lib/apiManager');\nvar Session = require('../service/Session');\nvar debug = require('debug')('sessionRouter');\nvar router = express.Router();\nvar User = require('../service/User.js');\n// var encryptor = require('../lib/encryptor.js');\nvar suid =  require('rand-token').suid;\nvar _baseURL=\"http://210.220.205.57\";\n\nvar nodemailer = require('nodemailer');\nvar smtpTransport = require('nodemailer-smtp-transport');\nvar mailDefaultOptions = {\n    from: 'webmaster@yescnc.co.kr', // sender address \n    //to: 'novles@yescnc.co.kr',\n    // subject: 'Hello', // Subject line \n    // text: 'Hello world', // plaintext body \n    // html: '<b>Hello world </b>' // html body \n};\nvar transport = nodemailer.createTransport(smtpTransport({\n    host: 'webmail.yescnc.co.kr',\n    port: 25,\n    auth: {\n        user: 'webmaster@yescnc.co.kr',\n        pass: 'Yes112233'\n    },\n    connectionTimeout:10000\n}));\n\n\nvar sessionResponse=function(req, res, session){\n    if (_.isUndefined(session)||_.isNull(session)){\n        res.send(new Session({isLogin:false, id:req.session.id}));\n    } else {\n        res.send(session);\n    }\n};\nrouter.route('/')\n.post(function(req, res){//만들기.\n    if (req.cookies.saram) {//cookie가 있을 때.\n        if (sessionManager.validationCookie(req.cookies.saram, res)){\n            sessionResponse(req, res, sessionManager.get(req.cookies.saram));\n        } else {//유효하지 않은 cookie 삭제.\n            sessionManager.remove(req.cookies.saram);\n            res.clearCookie(\"saram\");\n            sessionResponse(req, res);\n        }\n    } else {// 아예 세션 정보가 없을 때.\n        sessionResponse(req, res);\n    }\n    \n    sessionManager.poolCount(req.session.id);\n})\n.put(function(req, res){//login 부분 \n    var user = new User(req.body.user);\n    var session;\n    var msg;\n    \n    if (!_.isUndefined(req.body.initPassword) && req.body.initPassword){\n        user.initPassword().then(function(){\n            msg=\"SUCCESS_INIT_PASSWORD\";\n            sessionResponse(req, res, new Session({isLogin:false, id:req.session.id, msg:msg}));\n        }).catch(function(e){\n            debug(\"Exception:\" + e);\n        });\n    } else {\n        user.getUser().then(function(result){\n            if (result.length == 0){\n                debug(\"find user zero.\");\n                msg=\"DO_NOT_FOUND_USER\";\n                session=new Session({isLogin:false, id:req.session.id,msg:msg});\n            } else {\n                var resultUser= new User(result[0]);\n                debug(resultUser.get(\"password\"));\n                if (_.isEmpty(resultUser.get(\"password\"))||_.isNull(resultUser.get(\"password\"))){ //password 초기화 안된경우 \n                    debug(\"not init password\");\n                    msg=\"INIT_PASSWORD\";\n                    session=new Session({isLogin:false, id:req.session.id, msg:msg, initPassword:true, user:{id:resultUser.get(\"id\")}});\n                } else {\n                    if (user.get(\"password\")==resultUser.get(\"password\")){\n                        debug(\"login success\");\n                        \n                        var hour = 3600000000000;\n                        var accessToken = suid(32);\n                        \n                        var userInfo = resultUser.data;\n                        userInfo.password=\"\";\n                        \n                       \n                        session =new Session({isLogin:true, id:req.session.id, user:userInfo, auth:\"default\", ACCESS_TOKEN:accessToken});\n                        \n                        res.cookie('saram', session, { maxAge: hour, httpOnly: false });\n                        sessionManager.add(session, accessToken);\n                        \n                        \n                        /*\n                        * auth 관련 셋팅 로직 구현 필요\n                        */\n                    } else {\n                        debug(\"not equle password.\");\n                        msg=\"NOT_EQULES_PASSWORD\";\n                        session=new Session({isLogin:false, id:req.session.id, msg:msg});\n                    }          \n                }\n            }\n            sessionResponse(req, res, session);\n        }).catch(function(e) {\n            \n            debug(\"Exception:\" + e);\n        });\n    }\n    \n}).delete(function(req, res){\n    sessionManager.remove(req.cookies.saram);\n    req.session.destroy(function(){\n        \n    });\n    res.clearCookie(\"saram\");\n    res.send({});\n});\n\n\n\nrouter.route('/findPassword')\n.put(function(req, res){//만들기.\n    var user = new User(req.body.user);\n    user.findPassword().then(function(result){\n        fs.readFileAsync(path.dirname(module.parent.filename) + \"/views/requetInitPassword.html\",\"utf8\").then(function (html) {\n             //html read\n                var accessToken=apiManager.newToken();\n                var temp=_.template(html);\n                var data={\n                    name:result.name,\n                    token:accessToken,\n                    id:result.id,\n                    baseURL:_baseURL\n                };\n                var sendHTML=temp(data);\n                var mailOptions=_.defaults(mailDefaultOptions, {\n                    to:result.email,\n                    subject:\"Yescnc 근태관리 시스템(비밀번호 초기화 요청 페이지)\",\n                    html:sendHTML,\n\t\t\t\t\ttext:\"\"\n                });\n                var accessAPI={\n                    token:accessToken,\n                    url:\"/session/resetPassword\",\n                    user:result\n                };\n                apiManager.add(accessAPI);\n                \n                transport.sendMail(mailOptions, function(error, info){\n                    if(error){//메일 보내기 실패시 \n                        \n                        debug(error);\n                        apiManager.remove(accessAPI);\n                        \n                        res.status(500);\n                        res.send({\n                            success:false,\n                            message: \"ERROR_FIND_PASSWORD_SEND_MAIL\",\n                            error:error\n                        });\n                    }else{\n                        res.send({success:true, message:\"SUCCESS_REQUEST_FIND_PASSWORD\"});\n                    }\n                });\n        \n        }).catch(SyntaxError, function (e) {\n            debug(\"file contains invalid file\");\n        }).error(function (e) {\n            debug(e);\n                //throw new Error(err);\n                res.status(500);\n                res.send({\n                    success:false,\n                    message:\"ERROR_FIND_PASSWORD_SEND_MAIL\",\n                    error:e\n                });\n        });\n    }).catch(function(e){\n        debug(\"Exception:\" + e);;\n        res.status(500);\n        res.send({\n            success:false,\n            message: e.message,\n            error:e\n        });\n    });\n});\n\nrouter.route('/resetPassword')\n.get(function(req, res){\n    var params=req.query;\n    var accessAPI=apiManager.get(params.t);\n    if (!accessAPI.isValid){\n        res.send(res.render(\"apiError\",{baseURL:_baseURL, message:accessAPI.message}));\n    } else {\n        apiManager.remove(accessAPI);\n        var user = accessAPI.user;\n        fs.readFile(path.dirname(module.parent.filename) + '/views/successInitPassword.html', 'utf8', function(err, html){\n            if(err){\n                debug(err);\n                res.send(res.render(\"apiError\",{baseURL:_baseURL, message:\"서버 오류 발생 관리자에게 문의해주세요.\"}));\n            }else{\n                //html read\n                var temp=_.template(html);\n                var data={\n                    name:user.name,\n                    baseURL:_baseURL\n                };\n                var _user = new User({id:user.id, password:\"\"},true);\n                _user.initPassword().then(function(){\n                    var sendHTML=temp(data);\n                    res.send(sendHTML);\n                }).catch(function(e){\n                    debug(\"Exception:\" + e);\n                    res.send(res.render(\"apiError\",{baseURL:_baseURL, message:\"서버 오류 발생 관리자에게 문의해주세요.\"}));\n                });\n            }\n        });\n    }\n});\nmodule.exports = router;\n","undoManager":{"mark":0,"position":-1,"stack":[[{"start":{"row":112,"column":0},"end":{"row":113,"column":0},"action":"remove","lines":["            ",""],"id":1}]]},"ace":{"folds":[],"scrolltop":886,"scrollleft":0,"selection":{"start":{"row":82,"column":98},"end":{"row":82,"column":98},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":62,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1430385394000}